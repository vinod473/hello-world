#include<stdio.h>
#include<stdlib.h>
#include<string.h>
struct stack
{
  int top;
  int capacity;
  int *array;
};
struct stack* CreateStack(int capacity)
{
 struct stack *s=(struct stack*)malloc(sizeof(struct stack));
 if(!s)
        return NULL;
 s->top=-1;
 s->capacity=capacity;
 s->array=(int*)malloc(capacity*sizeof(int));
 if(!s->array)
    return NULL;
 return s;
}
char peak(struct stack *s)
{
    return s->array[s->top];
}
char pop(struct stack *s)
{
    if(!IsEmptyStack(s))
     return s->array[s->top--];
return '$';
}
int IsEmptyStack(struct stack *s)
{
    return s->top==-1;
}
void push(struct stack *s,char ch)
{
  s->array[++s->top]=ch;
}
int CheckBalanced(struct stack *s,char *ch)
{
    int i;
  for(i=0;ch[i];i++)
  {
      if(ch[i]=='{'||ch[i]=='('||ch[i]=='[')
        push(s,ch[i]);
      else
      {
          switch(ch[i])
          {
          case '}': if(!IsEmptyStack(s)&&peak(s)=='{')
                     pop(s);
                    else return -1;
                    break;
           case ')': if(!IsEmptyStack(s)&&peak(s)=='(')
                     pop(s);
                    else return -1;
                    break;
          case ']': if(!IsEmptyStack(s)&&peak(s)=='[')
                     pop(s);
                    else return -1;
                    break;
          }
      }
  }
if(!IsEmptyStack(s))
  return -1;
return 1;
}
int main()
{
    int i;
    char c[]="[()]{}{[()()]()}";
    struct stack *s=CreateStack(strlen(c));
    if(!s)
        return -1;
    i=CheckBalanced(s,c);
    if(i==1)
    printf("Balanced");
    else printf("Not Balanced");
return 0;
}
